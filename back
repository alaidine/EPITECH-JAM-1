#!/usr/bin/env python3
##
## EPITECH PROJECT, 2023
## checkers
## File description:
## checkers
##
import pygame
from move import *

# Plateau settings
SIZE = WIDTH, HEIGHT = 800, 800
ROWS, COLS = 8, 8
SQUARE_SIZE = HEIGHT // ROWS

# Mode
MENU_MODE = 0
GAME_MODE = 1
RULES_MODE = 2

# Couleur
DBROWN = (100, 45, 0)
LBROWN = (245, 190, 100)
RED = (215, 0, 0)
BLUE = (0, 140, 215)

#Plateau
board = [
    [1, 0, 1, 0, 1, 0, 1, 0],
    [0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 2, 0, 2, 0, 2],
    [2, 0, 2, 0, 2, 0, 2, 0],
    [0, 2, 0, 2, 0, 2, 0, 2]
]


def draw_board(window): # Dessine le plateau
    for row in range(ROWS):
        for col in range(COLS):
            color = DBROWN if (row + col) % 2 == 0 else LBROWN
            pygame.draw.rect(window, color, (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

def draw_token(window, board): # Dessine le pion
    mid = SQUARE_SIZE // 2

    for row in range(ROWS):
        for col in range(COLS):
            if (board[row][col] == 1):
                x = mid + SQUARE_SIZE * col
                y = mid + SQUARE_SIZE * row
                pygame.draw.circle(window, "black", (x, y), SQUARE_SIZE // 2 - 10)
            if (board[row][col] == 2):
                x = mid + SQUARE_SIZE * col
                y = mid + SQUARE_SIZE * row
                pygame.draw.circle(window, "white", (x, y), SQUARE_SIZE // 2 - 10)
            if (board[row][col] == 3):
                x = mid + SQUARE_SIZE * col
                y = mid + SQUARE_SIZE * row
                pygame.draw.circle(window, RED, (x, y), SQUARE_SIZE // 2 - 10)
            if (board[row][col] == 4):
                x = mid + SQUARE_SIZE * col
                y = mid + SQUARE_SIZE * row
                pygame.draw.circle(window, BLUE, (x, y), SQUARE_SIZE // 2 - 10)

def make_king():
    for row in range(ROWS):
        for col in range(COLS):
            if (board[0][col] == 2):
                board[0][col] = 4
            if (board[-1][col] == 1):
                board[-1][col] = 3

def get_pos(mouse_pos): # Convertie la position du click de la souris en coordonnée du carré
    return [int(mouse_pos[0] * COLS / WIDTH), int(mouse_pos[1] * ROWS / HEIGHT)]

def check_winner(board): # Vérifie si il y a un gagnant
    row = 0
    col = 0
    noir = 0
    blanc = 0
    for row in range(ROWS):
        for col in range(COLS):
            if board[row][col] == 1:
                noir += 1
            if board[row][col] == 2:
                blanc += 1
    if noir == 0 or blanc == 0:
        return 0
    return 1

def circle_selection(window, mouse_pos): # Dessine un cercle jaune sur la selection du pion
    mid = SQUARE_SIZE // 2
    posx = int(mouse_pos[0] * COLS / WIDTH)
    posy = int(mouse_pos[1] * COLS / WIDTH)
    x = mid + SQUARE_SIZE * posx
    y = mid + SQUARE_SIZE * posy
    pygame.draw.circle(window, "yellow", (x, y), SQUARE_SIZE // 2 - 40)
    print("SELECCCC")

def main():
    pygame.init()
    window = pygame.display.set_mode(SIZE)
    pygame.display.set_caption("Checkers")
    clock = pygame.time.Clock()
    set_mode = MENU_MODE
    running = True
    selected = None
    clicked = None
    action = 0
    turn_player = 2

    # Pictures
    background = pygame.image.load("content/background.jpg").convert()
    play_button = pygame.image.load("content/play.png").convert_alpha()
    rules_button = pygame.image.load("content/rules.png").convert_alpha()
    exit_button = pygame.image.load("content/exit.png").convert_alpha()
    rules = pygame.image.load("content/Rules.jpg").convert()
    back_button = pygame.image.load("content/back.png").convert()



    def handle_menu_events():
        window.blit(background, (0, 0))
        window.blit(play_button, (280, 450))
        window.blit(rules_button, (280, 570))
        window.blit(exit_button, (280, 690))
        pygame.display.flip()


    def handle_game_events():
        window.fill("black")
        draw_board(window)
        make_king()
        draw_token(window, board)
        if check_winner(board) == 0: # Si il y a un gagnant -> ferme la fenêtre
            running = False
        pygame.display.flip()


    def handle_rules_events():
        window.blit(rules, (0, 0))
        window.blit(back_button, (600, 700))
        pygame.display.flip()



    while running:
        # EVENT
        if set_mode == MENU_MODE:
            ###################################    POLLEVENT    ###################################
            for event in pygame.event.get():
                        ########    EXIT    ########
                if event.type == pygame.QUIT:
                    running = False

                    ###################################    MENU/RULES MODE    ###################################
                if set_mode == MENU_MODE or set_mode == RULES_MODE:
                            #######    PLAY    #######
                    if event.type == pygame.MOUSEBUTTONUP and set_mode == 0:
                        if pygame.mouse.get_pos()[0] > 280 and pygame.mouse.get_pos()[0] < (280 + 200):
                            if pygame.mouse.get_pos()[1] > 450 and pygame.mouse.get_pos()[1] < (450 + 100):
                                set_mode = GAME_MODE

                            #######    RULES    #######
                    if event.type == pygame.MOUSEBUTTONDOWN and set_mode == 0:
                        if pygame.mouse.get_pos()[0] > 280 and pygame.mouse.get_pos()[0] < (280 + 200):
                            if pygame.mouse.get_pos()[1] > 570 and pygame.mouse.get_pos()[1] < (570 + 100):
                                set_mode = RULES_MODE

                            ########    QUIT    ########
                    if event.type == pygame.MOUSEBUTTONDOWN and set_mode == 0:
                        if pygame.mouse.get_pos()[0] > 280 and pygame.mouse.get_pos()[0] < (280 + 200):
                            if pygame.mouse.get_pos()[1] > 690 and pygame.mouse.get_pos()[1] < (690 + 100):
                                running = False

                            ########    BACK    ########
                    if event.type == pygame.MOUSEBUTTONDOWN and set_mode == 2:
                        if pygame.mouse.get_pos()[0] > 600 and pygame.mouse.get_pos()[0] < (600 + 200):
                            if pygame.mouse.get_pos()[1] > 700 and pygame.mouse.get_pos()[1] < (700 + 100):
                                set_mode = MENU_MODE

                handle_menu_events()
                    ###################################    GAME MODE    ###################################
            if set_mode == GAME_MODE:
                if event.type == pygame.MOUSEBUTTONDOWN and action == 0:
                    mouse_pos = event.pos
                    board_mouse_pos = get_pos(mouse_pos)
                    selected = True

                if event.type == pygame.MOUSEBUTTONDOWN and action == 1:
                    click_pos = event.pos
                    board_click_pos = get_pos(click_pos)
                    selected = False
                    clicked = True

                if selected == True:
                    circle_selection(window, mouse_pos)
                    action = 1

                if selected == False and clicked == True:
                    if turn_player == 1 and move_type_black(board, board_mouse_pos, board_click_pos) > 0:
                        move_black(board, board_click_pos, board_mouse_pos)
                        turn_player = 2
                    elif turn_player == 2 and move_type_white(board, board_mouse_pos, board_click_pos) > 0:
                        move_white(board, board_click_pos, board_mouse_pos)
                        turn_player = 1
                    selected = None
                    clicked = None
                    action = 0



#######################    RENDERS    #######################

        elif set_mode == GAME_MODE:
            handle_game_events()
        elif set_mode == RULES_MODE:
            handle_rules_events()

        clock.tick(60)
    pygame.quit()

main()
